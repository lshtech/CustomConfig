[XComGame.XGAIBehavior]

; More restrictive AoE Profiles for Harbor Wave, let's only use this skill if actually useful.

-AoEProfiles=( Profile=HarborWavePrefTargetProfile, Ability=HarborWave, bIgnoreSelfDamage=True, bFailOnObjectiveFire=false, MinTargets=2, bTestTargetEffectsApply=true)
-AoEProfiles=( Profile=HarborWaveProfile, Ability=HarborWave, bIgnoreSelfDamage=True, bFailOnObjectiveFire=false, bTargetTheLost=1, MinTargets=1, bTestTargetEffectsApply=true)

+AoEProfiles=( Profile=HarborWavePrefTargetProfile, Ability=HarborWave, bIgnoreSelfDamage=True, bFailOnObjectiveFire=false, bTargetTheLost=0, MinTargets=3, bTestTargetEffectsApply=true)
+AoEProfiles=( Profile=HarborWaveProfile, Ability=HarborWave, bIgnoreSelfDamage=True, bFailOnObjectiveFire=false, bTargetTheLost=0, MinTargets=2, bTestTargetEffectsApply=true)

; Version of Advance Cover with heavier weight on flanking and less on distance. For use with the hidden Assassin movement
+m_arrMoveWeightProfile=(Profile=MWP_AdvanceCover_Flank, fCoverWeight=2.0f, fDistanceWeight=2.0f, fFlankingWeight=5.0f, fEnemyVisWeight=0.5f, fEnemyVisWeightPeak1=1.5, fAllyVisWeight=1.0f, fCloseModifier=1.1f, fFarModifier=0.9f) 

+m_arrMoveWeightProfile=(Profile=MWP_GrappleAway, fCoverWeight=2.0f, fDistanceWeight=2.0f, fFlankingWeight=1.0f, fEnemyVisWeight=0.1f, fEnemyVisWeightPeak1=1.0f, fAllyVisWeight=0, fHeightWeight=1.5f, fCloseModifier=1.0f, fFarModifier=1.0f)
+m_arrMoveWeightProfile=(Profile=ChosenStayBack, fCoverWeight=2.0f, fDistanceWeight=0.6f, fFlankingWeight=0.1f, fEnemyVisWeight=0.0f, fEnemyVisWeightPeak1=2.0, fAllyVisWeight=0.3f, fHeightWeight=3.0f, fCloseModifier=0.6f, fFarModifier=2f) 

[XComGame.X2AIBTBehaviorTree]

+EquivalentAbilities=( KeyName=DetonateMindshield, EquivalentAbilityName[0]=DetonateMindshieldM1, EquivalentAbilityName[1]=DetonateMindshieldM2, EquivalentAbilityName[2]=DetonateMindshieldM3, EquivalentAbilityName[3]=DetonateMindshieldM4)

; ### General stuff ###

; Chosen will go for the kidnap instead of extracting knowledge half of the times
-Behaviors=(BehaviorName=SelectKidnapOrExtract, NodeType=Selector, Child[0]=TryVanishReveal, Child[1]=ChanceToKidnap, Child[2]=TryExtractKnowledge)
+Behaviors=(BehaviorName=SelectKidnapOrExtract, NodeType=Selector, Child[0]=TryVanishReveal, Child[1]=TryKidnapCollector, Child[2]=KidnapMaybe, Child[3]=TryExtractKnowledge)
+Behaviors=(BehaviorName=KidnapMaybe, NodeType=RandFilter, Child[0]=TryKidnap, Param[0]=50)

; The Collectors event increases Kidnap chance to 100%
+Behaviors=(BehaviorName=TryKidnapCollector, NodeType=Sequence, Child[0]=DarkEventActive-DarkEvent_TheCollectors, Child[1]=TryKidnap)
+Behaviors=(BehaviorName=DarkEventActive-DarkEvent_TheCollectors, NodeType=Condition)

; If the Chosen is not "Keen" (= does not have Auto-Bleedout), then he will want to kill soldiers.
+Behaviors=(BehaviorName=AffectedByEffect-ChosenKeen, NodeType=Condition)
+Behaviors=(BehaviorName=IsNotKeen, NodeType=Inverter, Child[0]=AffectedByEffect-ChosenKeen)

+Behaviors=(BehaviorName=BloodthirstyChosen, NodeType=Sequence, Child[0]=IsNotKeen, Child[1]=BloodthirstOptions)

+Behaviors=(BehaviorName=BloodthirstOptions, NodeType=Selector, Child[0]=ShootWhenFlankingBloodthirst, Child[1]=ShootWhenKillShotBloodthirst, Child[2]=ShootWhenSureShotBloodthirst, Child[3]=ShootWhenReasonableShotBloodthirst, Child[4]=SetUpFlankFirstActionBloodthirst)

+Behaviors=(BehaviorName=ShootWhenFlankingBloodthirst, NodeType=RandFilter, Child[0]=ShootWhenFlanking, Param[0]=80)
+Behaviors=(BehaviorName=ShootWhenKillShotBloodthirst, NodeType=RandFilter, Child[0]=ShootWhenKillShot, Param[0]=80)
+Behaviors=(BehaviorName=ShootWhenSureShotBloodthirst, NodeType=RandFilter, Child[0]=ShootWhenSureShot, Param[0]=50)
+Behaviors=(BehaviorName=ShootWhenReasonableShotBloodthirst, NodeType=RandFilter, Child[0]=ShootWhenReasonableShot, Param[0]=50)
+Behaviors=(BehaviorName=SetUpFlankFirstActionBloodthirst, NodeType=RandFilter, Child[0]=SetUpFlankFirstAction, Param[0]=50)
+Behaviors=(BehaviorName=SetUpFlankFirstAction, NodeType=Sequence, Child[0]=NotLastActionPoint, Child[1]=MoveFlanking)

; +++ Bloodthirst: Reasonable Shot (CTH > 40)
+Behaviors=(BehaviorName=ShootWhenReasonableShot, NodeType=Sequence, Child[0]=IsAbilityAvailable-StandardShot, Child[1]=SelectReasonableShotEnemyTarget_ABA, Child[2]=SelectAbility-StandardShot)
+Behaviors=(BehaviorName=SelectReasonableShotEnemyTarget_ABA, NodeType=Sequence, Child[0]=SetTargetStack-StandardShot, Child[1]=EvaluateReasonableShotEnemyTargets_ABA, Child[2]=HasValidTarget-StandardShot)
+Behaviors=(BehaviorName=EvaluateReasonableShotEnemyTargets_ABA, NodeType=RepeatUntilFail, Child[0]=EvaluateReasonableShotEnemies_ABA)
+Behaviors=(BehaviorName=EvaluateReasonableShotEnemies_ABA, NodeType=Sequence, Child[0]=SetNextTarget, Child[1]=SSScoreReasonableShotEnemy_ABA, Child[2]=UpdateBestTarget)
+Behaviors=(BehaviorName=SSScoreReasonableShotEnemy_ABA, NodeType=Successor, Child[0]=ScoreReasonableShotEnemy_ABA)
+Behaviors=(BehaviorName=ScoreReasonableShotEnemy_ABA, NodeType=Sequence, Child[0]=TargetHitChanceNotLow, Child[1]=TargetIsNotCivilian, Child[2]=TargetIsEnemy, Child[3]=TargetNotBoundorPanicked, Child[4]=GenericTargetEvaluations)



; #### THE ELDERS GREATEST CHAMPION ####

+Behaviors=(BehaviorName=TryWarlockCombatAbilities_ABA, NodeType=Selector, \\
	Child[0]=SpectralArmyMaybe, \\
	Child[1]=LowHealthSpectralArmyPriority, \\
	Child[2]=BloodthirstyChosen, \\
	Child[3]=CorressMaybe, \\
	Child[4]=TryTeleportAllyMeleeUnit, \\
	Child[5]=TryRandomPsi, \\
	Child[6]=TryMindScorch, \\
	Child[7]=TryPsiMindControl, \\
	Child[8]=TryDetonateMindshield)

; Behaviors=(BehaviorName=WarlockMoveIfNecessary, NodeType=Sequence, Child[0]=ChosenSafeToMove, Child[1]=CheckIfNeedToMove, Child[2]=WarlockMoveDefensive)
-Behaviors=(BehaviorName=WarlockMoveIfNecessary, NodeType=Sequence, Child[0]=ChosenSafeToMove, Child[1]=CheckIfNeedToMove, Child[2]=WarlockMoveDefensive)
+Behaviors=(BehaviorName=WarlockMoveIfNecessary, NodeType=Sequence, Child[0]=NotLastActionPoint, Child[1]=ChosenSafeToMove, Child[2]=CheckIfNeedToMove, Child[3]=WarlockMoveDefensive)

-Behaviors=(BehaviorName=WarlockMoveDefensive, NodeType=Selector, Child[0]=WarlockMoveDefensiveHighCover, Child[1]=WarlockMoveDefensiveAnyCover)
+Behaviors=(BehaviorName=WarlockMoveDefensive, NodeType=Selector, Child[0]=TryTeleportDefensiveWarlock, Child[1]=WarlockMoveDefensiveHighCover, Child[2]=WarlockMoveDefensiveAnyCover)

+Behaviors=(BehaviorName=TryTeleportDefensiveWarlock, NodeType=Sequence, Child[0]=IsAbilityAvailable-Teleport, Child[1]=ResetDestinationSearch, Child[2]=RestrictToUnflanked, Child[3]=UseDashMovement, Child[4]=FindDestinationWithLoS-MWP_IsoTeleport, Child[5]=SelectAbility-Teleport)


-Behaviors=(BehaviorName=TryWarlockMapAbilities, NodeType=Selector, Child[0]=TryCorress, Child[1]=SkipMove ) 
+Behaviors=(BehaviorName=TryWarlockMapAbilities, NodeType=Selector, Child[0]=TryWarlockMapAbilities_Random, Child[1]=TryShieldAlly, Child[1]=TryCorress, Child[3]=TryAmmoDump, Child[4]=SkipMove ) 
+Behaviors=(BehaviorName=TryWarlockMapAbilities_Random, NodeType=RandSelector, Child[0]=TryShieldAlly, Param[0]=60, Child[1]=TryCorress, Param[1]=20, Child[2]=TryAmmoDump, Param[2]=20) 

+Behaviors=(BehaviorName=TryRandomPsi, NodeType=RandSelector, Child[0]=TryMindscorch, Param[0]=40, Child[1]=TryPsiMindControl, Param[1]=30, Child[2]=TryDetonateMindshield, Param[2]=30) 

;Behaviors=(BehaviorName=NonAggressiveBehaviorFirstAction, NodeType=RandSelector, Child[0]=TryOverwatch, Param[0]=33, Child[1]=MoveFlankingOrDefensive, Param[1]=67)

+Behaviors=(BehaviorName=SelectAbility-DetonateMindshield, NodeType=Action)
+Behaviors=(BehaviorName=SelectAbility-AmmoDump, NodeType=Action)
+Behaviors=(BehaviorName=SelectAbility-ShieldAlly, NodeType=Action)
+Behaviors=(BehaviorName=IsAbilityAvailable-DetonateMindshield, NodeType=Condition)
+Behaviors=(BehaviorName=IsAbilityAvailable-AmmoDump, NodeType=Condition)
+Behaviors=(BehaviorName=IsAbilityAvailable-ShieldAlly, NodeType=Condition)


; Detonate Mindshield
; Target validation is handled by the ability itself, this just picks a semi-random valid target
+Behaviors=(BehaviorName=TryDetonateMindshield, NodeType=Sequence, Child[0]=IsAbilityAvailable-DetonateMindshield, Child[1]=SelectTargetForDetonateMindshield, Child[2]=SelectAbility-DetonateMindshield)
+Behaviors=(BehaviorName=SelectTargetForDetonateMindshield, NodeType=Sequence, Child[0]=SetTargetStack-DetonateMindshield, Child[1]=ScoreAllTargets_DetonateMindshield, Child[2]=HasValidTarget-DetonateMindshield)
+Behaviors=(BehaviorName=SetTargetStack-DetonateMindshield, NodeType=Action)
+Behaviors=(BehaviorName=ScoreAllTargets_DetonateMindshield, NodeType=RepeatUntilFail, Child[0]=ScoreTarget_DetonateMindshieldLoop)
+Behaviors=(BehaviorName=HasValidTarget-DetonateMindshield, NodeType=Condition)
+Behaviors=(BehaviorName=ScoreTarget_DetonateMindshieldLoop, NodeType=Sequence, Child[0]=SetNextTarget, Child[1]=ScoreTarget_DetonateMindshieldScoring, Child[2]=UpdateBestTarget)
+Behaviors=(BehaviorName=ScoreTarget_DetonateMindshieldScoring, NodeType=Successor, Child[0]=ScoreDetonateMindshieldOption)
+Behaviors=(BehaviorName=ScoreDetonateMindshieldOption, NodeType=Sequence, Child[0]=TargetIsEnemy, Child[1]=SometimesRandomizeTarget, Child[2]=AvoidBoundAndPanickedTargets)

; AmmoDump
; Target validation is handled by the ability itself, this just picks a semi-random valid target
+Behaviors=(BehaviorName=TryAmmoDump, NodeType=Sequence, Child[0]=IsAbilityAvailable-AmmoDump, Child[1]=SelectTargetForAmmoDump, Child[2]=SelectAbility-AmmoDump)
+Behaviors=(BehaviorName=SelectTargetForAmmoDump, NodeType=Sequence, Child[0]=SetTargetStack-AmmoDump, Child[1]=ScoreAllTargets_AmmoDump, Child[2]=HasValidTarget-AmmoDump)
+Behaviors=(BehaviorName=SetTargetStack-AmmoDump, NodeType=Action)
+Behaviors=(BehaviorName=ScoreAllTargets_AmmoDump, NodeType=RepeatUntilFail, Child[0]=ScoreTarget_AmmoDumpLoop)
+Behaviors=(BehaviorName=HasValidTarget-AmmoDump, NodeType=Condition)
+Behaviors=(BehaviorName=ScoreTarget_AmmoDumpLoop, NodeType=Sequence, Child[0]=SetNextTarget, Child[1]=ScoreTarget_AmmoDumpScoring, Child[2]=UpdateBestTarget)
+Behaviors=(BehaviorName=ScoreTarget_AmmoDumpScoring, NodeType=Successor, Child[0]=ScoreAmmoDumpOption)
+Behaviors=(BehaviorName=ScoreAmmoDumpOption, NodeType=Sequence, Child[0]=TargetIsEnemy, Child[1]=TargetNotLost, Child[2]=TargetNotMilitia, Child[3]=TargetIsNotCivilian, Child[4]=SometimesRandomizeTarget, Child[5]=AvoidBoundAndPanickedTargets)

; ShieldAlly
+Behaviors=(BehaviorName=TryShieldAlly, NodeType=Sequence, Child[0]=IsAbilityAvailable-ShieldAlly, Child[1]=SelectTargetForShieldAlly, Child[2]=SelectAbility-ShieldAlly)
+Behaviors=(BehaviorName=SelectTargetForShieldAlly, NodeType=Sequence, Child[0]=SetTargetStack-ShieldAlly, Child[1]=ScoreAllTargets_ShieldAlly, Child[2]=HasValidTarget-ShieldAlly)
+Behaviors=(BehaviorName=SetTargetStack-ShieldAlly, NodeType=Action)
+Behaviors=(BehaviorName=ScoreAllTargets_ShieldAlly, NodeType=RepeatUntilFail, Child[0]=ScoreTarget_ShieldAllyLoop)
+Behaviors=(BehaviorName=HasValidTarget-ShieldAlly, NodeType=Condition)
+Behaviors=(BehaviorName=ScoreTarget_ShieldAllyLoop, NodeType=Sequence, Child[0]=SetNextTarget, Child[1]=ScoreTarget_ShieldAllyScoring, Child[2]=UpdateBestTarget)
+Behaviors=(BehaviorName=ScoreTarget_ShieldAllyScoring, NodeType=Successor, Child[0]=ScoreShieldAllyOption)
+Behaviors=(BehaviorName=ScoreShieldAllyOption, NodeType=Sequence, Child[0]=TargetNotShielded, Child[1]=TargetNotLost, Child[2]=TargetNotMilitia, Child[3]=ScorePriestPriority, Child[4]=SometimesRandomizeTarget)
+Behaviors=(BehaviorName=TargetAffectedByEffect-EnergyShieldEffect, NodeType=Condition)
+Behaviors=(BehaviorName=TargetNotShielded, NodeType=Inverter, Child[0]=TargetAffectedByEffect-EnergyShieldEffect)
+Behaviors=(BehaviorName=TargetNotLost, NodeType=Inverter, Child[0]=IsTargetTeam-eTeam_TheLost)
+Behaviors=(BehaviorName=TargetNotMilitia, NodeType=Inverter, Child[0]=IsTargetTeam-eTeam_Resistance)
+Behaviors=(BehaviorName=ScorePriestPriority, NodeType=Sequence, Child[0]=IsTargetPriest, Child[1]=AddToTargetScore_10)
+Behaviors=(BehaviorName=IsTargetPriest, NodeType=Selector, Child[0]=TargetTemplateNameIs-AdvPriestM1, Child[1]=TargetTemplateNameIs-AdvPriestM2, Child[2]=TargetTemplateNameIs-AdvPriestM3)
+Behaviors=(BehaviorName=TargetTemplateNameIs-AdvPriestM1, NodeType=Condition)
+Behaviors=(BehaviorName=TargetTemplateNameIs-AdvPriestM2, NodeType=Condition)
+Behaviors=(BehaviorName=TargetTemplateNameIs-AdvPriestM3, NodeType=Condition)

; SpectralArmy, Corress
+Behaviors=(BehaviorName=SpectralArmyMaybe, NodeType=Sequence, Child[0]=DidNotJustMC, Child[1]=SpectralArmyMaybe2)
+Behaviors=(BehaviorName=CorressMaybe, NodeType=RandFilter, Child[0]=TryCorress, Param[0]=10)

+Behaviors=(BehaviorName=SpectralArmyMaybe2, NodeType=RandFilter, Child[0]=TrySpectralArmy, Param[0]=25)

+Behaviors=(BehaviorName=DidNotJustMC, NodeType=Inverter, Child[0]=WasLastAbility-PsiMindControl)
+Behaviors=(BehaviorName=WasLastAbility-PsiMindControl, NodeType=Condition)

; +++ Prio: Shoot when Flanking and CTH > 40
+Behaviors=(BehaviorName=ShootWhenFlanking, NodeType=Sequence, Child[0]=IsAbilityAvailable-StandardShot, Child[1]=SelectFlankedEnemyTarget_ABA, Child[2]=SelectAbility-StandardShot)
+Behaviors=(BehaviorName=SelectFlankedEnemyTarget_ABA, NodeType=Sequence, Child[0]=SetTargetStack-StandardShot, Child[1]=EvaluateFlankedEnemyTargets_ABA, Child[2]=HasValidTarget-StandardShot)
+Behaviors=(BehaviorName=EvaluateFlankedEnemyTargets_ABA, NodeType=RepeatUntilFail, Child[0]=EvaluateFlankedEnemies_ABA)
+Behaviors=(BehaviorName=EvaluateFlankedEnemies_ABA, NodeType=Sequence, Child[0]=SetNextTarget, Child[1]=SSScoreFlankedEnemy_ABA, Child[2]=UpdateBestTarget)
+Behaviors=(BehaviorName=SSScoreFlankedEnemy_ABA, NodeType=Successor, Child[0]=ScoreFlankedEnemy_ABA)
+Behaviors=(BehaviorName=ScoreFlankedEnemy_ABA, NodeType=Sequence, Child[0]=IsFlankingTarget, Child[1]=TargetIsNotCivilian, Child[2]=TargetIsEnemy, Child[3]=TargetHitChanceNotLow, Child[4]=TargetNotBoundorPanicked, Child[5]=GenericTargetEvaluations)
+Behaviors=(BehaviorName=TargetHitChanceNotLow, NodeType=Inverter, Child[0]=TargetHitChanceLow) ; <-- CTH > 40

; +++ Prio: Shoot when KillShot and CTH > 40
+Behaviors=(BehaviorName=ShootWhenKillShot, NodeType=Sequence, Child[0]=IsAbilityAvailable-StandardShot, Child[1]=SelectKillShotEnemyTarget_ABA, Child[2]=SelectAbility-StandardShot)
+Behaviors=(BehaviorName=SelectKillShotEnemyTarget_ABA, NodeType=Sequence, Child[0]=SetTargetStack-StandardShot, Child[1]=EvaluateKillShotEnemyTargets_ABA, Child[2]=HasValidTarget-StandardShot)
+Behaviors=(BehaviorName=EvaluateKillShotEnemyTargets_ABA, NodeType=RepeatUntilFail, Child[0]=EvaluateKillShotEnemies_ABA)
+Behaviors=(BehaviorName=EvaluateKillShotEnemies_ABA, NodeType=Sequence, Child[0]=SetNextTarget, Child[1]=SSScoreKillShotEnemy_ABA, Child[2]=UpdateBestTarget)
+Behaviors=(BehaviorName=SSScoreKillShotEnemy_ABA, NodeType=Successor, Child[0]=ScoreKillShotEnemy_ABA)
+Behaviors=(BehaviorName=ScoreKillShotEnemy_ABA, NodeType=Sequence, Child[0]=TargetIsKillable, Child[1]=TargetIsNotCivilian, Child[2]=TargetIsEnemy, Child[3]=TargetHitChanceNotLow, Child[4]=TargetNotBoundorPanicked, Child[5]=GenericTargetEvaluations)

; +++ Prio: Shoot when sure shot (CTH > 80)
+Behaviors=(BehaviorName=ShootWhenSureShot, NodeType=Sequence, Child[0]=IsAbilityAvailable-StandardShot, Child[1]=SelectSureShotEnemyTarget_ABA, Child[2]=SelectAbility-StandardShot)
+Behaviors=(BehaviorName=SelectSureShotEnemyTarget_ABA, NodeType=Sequence, Child[0]=SetTargetStack-StandardShot, Child[1]=EvaluateSureShotEnemyTargets_ABA, Child[2]=HasValidTarget-StandardShot)
+Behaviors=(BehaviorName=EvaluateSureShotEnemyTargets_ABA, NodeType=RepeatUntilFail, Child[0]=EvaluateSureShotEnemies_ABA)
+Behaviors=(BehaviorName=EvaluateSureShotEnemies_ABA, NodeType=Sequence, Child[0]=SetNextTarget, Child[1]=SSScoreSureShotEnemy_ABA, Child[2]=UpdateBestTarget)
+Behaviors=(BehaviorName=SSScoreSureShotEnemy_ABA, NodeType=Successor, Child[0]=ScoreSureShotEnemy_ABA)
+Behaviors=(BehaviorName=ScoreSureShotEnemy_ABA, NodeType=Sequence, Child[0]=TargetHitChanceHigh, Child[1]=TargetIsNotCivilian, Child[2]=TargetIsEnemy, Child[3]=TargetNotBoundorPanicked, Child[4]=GenericTargetEvaluations)

; For the Warlock, these priority shots are less of an priority than they are for the common trooper, he might decide to use THE AMAZING GIFT OF THE ELDERS instead, so let's randomize some stuff here, too
+Behaviors=(BehaviorName=ShootWhenFlankingMaybe, NodeType=RandFilter, Child[0]=ShootWhenFlanking, Param[0]=50)
+Behaviors=(BehaviorName=ShootWhenKillShotMaybe, NodeType=RandFilter, Child[0]=ShootWhenKillShot, Param[0]=10)
+Behaviors=(BehaviorName=ShootWhenSureShotMaybe, NodeType=RandFilter, Child[0]=ShootWhenSureShot, Param[0]=5)
+Behaviors=(BehaviorName=TakePriorityShotsMaybe, NodeType=Selector, Child[0]=ShootWhenFlankingMaybe, Child[1]=ShootWhenKillShotMaybe, Child[2]=ShootWhenSureShotMaybe)

; Priority Option for Teleport Ally: Teleport a Chryssalid or Berserker
+Behaviors=(BehaviorName=TryTeleportAllyMeleeUnit, NodeType=Sequence, Child[0]=NotLastActionPoint, Child[1]=TryTeleportAllyMelee)
+Behaviors=(BehaviorName=TryTeleportAllyMelee, NodeType=Sequence, Child[0]=IsAbilityAvailable-TeleportAlly, Child[1]=SelectTargetForTeleportAllyMelee, Child[2]=SetBestTargetAsCurrentTarget-TeleportAlly, Child[3]=SelectTargetDestinationForTeleportAlly, Child[4]=SelectAbility-TeleportAlly)
+Behaviors=(BehaviorName=SelectTargetForTeleportAllyMelee, NodeType=Sequence, Child[0]=SetTargetStack-TeleportAlly, Child[1]=SelectAllyToTeleportMelee, Child[2]=HasValidTarget-TeleportAlly)
+Behaviors=(BehaviorName=SelectAllyToTeleportMelee, NodeType=RepeatUntilFail, Child[0]=EvaluateAlliesToTeleportMelee)
+Behaviors=(BehaviorName=EvaluateAlliesToTeleportMelee, NodeType=Sequence, Child[0]=SetNextTarget, Child[1]=SSEvaluateForTeleportAllyMelee, Child[2]=UpdateBestTarget)
+Behaviors=(BehaviorName=SSEvaluateForTeleportAllyMelee, NodeType=Successor, Child[0]=EvaluateForTeleportAllyMelee)
+Behaviors=(BehaviorName=EvaluateForTeleportAllyMelee, NodeType=Sequence, Child[0]=TargetHasRevealed, Child[1]=TargetNotFlanking, Child[2]=TargetNotSpectral, Child[3]=TargetIsChryssalidOrBerserker, Child[4]=GenericScoreTargetRandomlySequence)
+Behaviors=(BehaviorName=TargetIsChryssalidOrBerserker, NodeType=Selector, Child[0]=TargetCharacterGroup-Chryssalid, Child[1]=TargetCharacterGroup-Berserker)
+Behaviors=(BehaviorName=TargetCharacterGroup-Chryssalid, NodeType=Condition)
+Behaviors=(BehaviorName=TargetCharacterGroup-Berserker, NodeType=Condition)




; ##### THE BITCH ####


; Priority from stealth: Harborwave on 3+ targets if offered
+Behaviors=(BehaviorName=TryHarborWaveFromStealth, NodeType=Sequence, Child[0]=HarborWave_HitIdealTarget, Child[1]=RevealIfVanishedThenHarborWave)
+Behaviors=(BehaviorName=RevealIfVanishedThenHarborWave, NodeType=Sequence, Child[0]=TryVanishReveal, Child[1]=SSSetPreselectedAbility-HarborWave)

; When presented with a chance to swordstrike from stealth, she will now have a 50% to skip it. This will make her advance further or give her opportunity for shotgun strikes.
+Behaviors=(BehaviorName=TryPartingSilkMaybe, NodeType=RandFilter, Child[0]=TryPartingSilkConditionally, Param[0]=50)

; Shotgun blast into the flank from stealth
+Behaviors=(BehaviorName=TryShotgunFromStealth, NodeType=Sequence, Child[0]=IsAbilityAvailable-StandardShot, Child[1]=SelectFlankedEnemyTarget_ABA, Child[2]=AssassinRevealOrShoot_Flank)
+Behaviors=(BehaviorName=AssassinRevealOrShoot_Flank, NodeType=Selector, Child[0]=DoIfFlankedMove, Child[1]=RevealIfVanishedThenShoot, Child[2]=ShootWhenFlanking)

; Movement during Stealth tries to go for flanks
-Behaviors=(BehaviorName=AdvanceCoverDashMove, NodeType=Sequence, Child[0]=IsAbilityAvailable-StandardMove, Child[1]=UseDashMovement, Child[2]=FindDestination-MWP_AdvanceCover, Child[3]=SelectAbility-StandardMove)
+Behaviors=(BehaviorName=AdvanceCoverDashMove, NodeType=Sequence, Child[0]=IsAbilityAvailable-StandardMove, Child[1]=UseDashMovement, Child[2]=FindDestination-MWP_AdvanceCover_Flank, Child[3]=SelectAbility-StandardMove)
+Behaviors=(BehaviorName=FindDestination-MWP_AdvanceCover_Flank, NodeType=Action)

; Cutting out the cycling of abilities here
+Behaviors=(BehaviorName=CycleVisibleAssassinOptions_ABA, NodeType=Selector, \\
	Child[0]=VanishingWindWhenHidden, \\
	Child[1]=TryChosenSummon, \\
	Child[2]=SelectFromVisibleAssassinOptions_ABA)

; and make it more planned out
+Behaviors=(BehaviorName=SelectFromVisibleAssassinOptions_ABA, NodeType=Selector, \\
	Child[0]=OverwatchHandlerShootOverwatcherOption,\\
	Child[1]=AssassinBendingReedMovement, \\
	Child[2]=AssassinFlankedCheck, \\
	Child[3]=TryMountainMistPriority, \\
	Child[4]=TryHarborWavePriority, \\
	Child[5]=BloodthirstyChosen, \\
	Child[6]=TakePriorityShotsAss, \\
	Child[7]=TryMoveForMM, \\
	Child[8]=TryPartingSilkMaybe, \\
	Child[9]=MoveFlankingIfFirstAbility, \\
	Child[10]=TryPartingSilk, \\
	Child[11]=NoHarborWaveTargetOption, \\
	Child[12]=OverwatchHandlerBackupOption, \\
	Child[13]=SelectFromVisibleAssassinOptions)

+Behaviors=(BehaviorName=IsHiddenFromPlayer, NodeType=Inverter, Child[0]=IsVisibleToPlayer) 
+Behaviors=(BehaviorName=VanishingWindWhenHidden, NodeType=Sequence, Child[0]=IsHiddenFromPlayer, Child[1]=TryVanishingWind)

+Behaviors=(BehaviorName=TryHarborWavePriority, NodeType=Sequence, Child[0]=FindPotentialAoETargets-HarborWavePrefTargetProfile, Child[1]=SelectAoETarget-HarborWavePrefTargetProfile, Child[2]=SelectAbility-HarborWave)
+Behaviors=(BehaviorName=TryMountainMistPriority, NodeType=Sequence, Child[0]=IsAbilityAvailable-ThrowGrenade, Child[1]=FindPotentialAoETargets-MountainMistPreferred, Child[2]=SelectAoETarget-MountainMistPreferred, Child[3]=SelectAbility-ThrowGrenade)

+Behaviors=(BehaviorName=ShootWhenFlankingAss, NodeType=RandFilter, Child[0]=ShootWhenFlanking, Param[0]=90)
+Behaviors=(BehaviorName=ShootWhenKillShotAss, NodeType=RandFilter, Child[0]=ShootWhenKillShot, Param[0]=60)
+Behaviors=(BehaviorName=ShootWhenSureShotAss, NodeType=RandFilter, Child[0]=ShootWhenSureShot, Param[0]=35)
+Behaviors=(BehaviorName=TakePriorityShotsAss, NodeType=Selector, Child[0]=ShootWhenFlankingAss, Child[1]=ShootWhenKillShotAss, Child[2]=ShootWhenSureShotAss)

+Behaviors=(BehaviorName=TryVanishingWindMaybe, NodeType=RandFilter, Child[0]=TryVanishingWind, Param[0]=10)
+Behaviors=(BehaviorName=HarborWaveAndMountainMistOptionsMaybe, NodeType=RandFilter, Child[0]=HarborWaveAndMountainMistOptions, Param[0]=30)
+Behaviors=(BehaviorName=AssassinRevealOrShootMaybe, NodeType=RandFilter, Child[0]=AssassinRevealOrShoot, Param[0]=30)

+Behaviors=(BehaviorName=TryMoveForMM, NodeType=Sequence, Child[0]=SafeToMove, Child[1]=NotLastActionPoint, Child[2]=IsAbilityReady-ThrowGrenade, Child[3]=FindPotentialAoETargets-MountainMistPreferred, Child[4]=MoveStandardIfFirstAbility-Grenade, Child[5]=SSSetPreselectedAbility-MountainMistPreferred)

+Behaviors=(BehaviorName=AssassinFlankedCheck, NodeType=Sequence, Child[0]=CheckIfNeedToMove, Child[1]=AssassinFlankedSelector)
+Behaviors=(BehaviorName=AssassinFlankedSelector, NodeType=Selector, Child[0]=TryMoveForMM, Child[1]=TryPartingSilkMaybe, Child[2]=MoveFlankingIfFirstAbility)

; #### THE EDGELORD ####

+Behaviors=(BehaviorName=ChosenSniperFirstAction, NodeType=Sequence, Child[0]=NotLastActionPoint, Child[1]=ChosenSniperFirstActionSelector)
+Behaviors=(BehaviorName=ChosenSniperLastAction, NodeType=Sequence, Child[0]=IsLastActionPoint, Child[1]=ChosenSniperLastActionSelector)


; The Hunter will take any flankshots offered, but otherwise will tend to go showboating off instead if he feels like it. Grapple Ho! 
+Behaviors=(BehaviorName=ShootWhenFlankingHunter, NodeType=RandFilter, Child[0]=ShootWhenFlanking, Param[0]=90)
+Behaviors=(BehaviorName=ShootWhenKillShotHunter, NodeType=RandFilter, Child[0]=ShootWhenKillShot, Param[0]=60)
+Behaviors=(BehaviorName=ShootWhenSureShotHunter, NodeType=RandFilter, Child[0]=ShootWhenSureShot, Param[0]=25)
+Behaviors=(BehaviorName=TakePriorityShotsHunter, NodeType=Selector, Child[0]=ShootWhenFlankingHunter, Child[1]=ShootWhenKillShotHunter, Child[2]=ShootWhenSureShotHunter)

; movement StayBack for Hunter
+Behaviors=(BehaviorName=FindDestinationWithLoS-ChosenStayBack, NodeType=Action)
+Behaviors=(BehaviorName=MoveChosenStayBack, NodeType=Sequence, Child[0]=SafeToMove, Child[1]=MoveChosenStayBackUnsafe)
+Behaviors=(BehaviorName=MoveChosenStayBackUnsafe, NodeType=Sequence, Child[0]=IsAbilityAvailable-StandardMove, Child[1]=ResetDestinationSearch, Child[2]=FindDestinationWithLoS-ChosenStayBack, Child[3]=SelectAbility-StandardMove)
+Behaviors=(BehaviorName=DoIfFlankedMove_ChosenStayBack, NodeType=Sequence, Child[0]=CheckIfNeedToMove, Child[1]=MoveChosenStayBackUnsafe)

; Height-preferred movement, without forced move on first action
+Behaviors=(BehaviorName=DoIfFlankedMoveHeight, NodeType=Sequence, Child[0]=ChosenSafeToMove, Child[1]=CheckIfNeedToMove, Child[2]=FlankedMoveSelectorHeight)

+Behaviors=(BehaviorName=DoIfFlankedFallback, NodeType=Sequence, Child[0]=CheckIfNeedToMove, Child[1]=Fallback)


+Behaviors=(BehaviorName=TryGrappleForAway, NodeType=Sequence, Child[0]=CheckIfNeedToMove, Child[1]=IsAbilityAvailable-HunterGrapple, Child[2]=FindFarAwayGrappleDestination, Child[3]=SelectAbility-HunterGrapple)

+Behaviors=(BehaviorName=FindFarAwayGrappleDestination, NodeType=Sequence, Child[0]=ResetDestinationSearch, Child[1]=RestrictToAbilityRange-HunterGrapple, Child[2]=UseDashMovement, Child[3]=RestrictToUnflanked, Child[4]=RequireEnemyLoSToTile, Child[5]=FindDestinationWithLoS-MWP_GrappleAway)
+Behaviors=(BehaviorName=FindDestinationWithLoS-MWP_GrappleAway, NodeType=Action)


; PISTOL
; +++ Prio: Shoot when Flanking and CTH > 40
+Behaviors=(BehaviorName=ShootWhenFlanking_Pistol, NodeType=Sequence, Child[0]=IsAbilityAvailable-PistolStandardShot, Child[1]=SelectFlankedEnemyTarget_Pistol, Child[2]=SelectAbility-PistolStandardShot)
+Behaviors=(BehaviorName=SelectFlankedEnemyTarget_Pistol, NodeType=Sequence, Child[0]=SetTargetStack-PistolStandardShot, Child[1]=EvaluateFlankedEnemyTargets_ABA, Child[2]=HasValidTarget-PistolStandardShot)

; +++ Prio: Shoot when KillShot and CTH > 40
+Behaviors=(BehaviorName=ShootWhenKillShot_Pistol, NodeType=Sequence, Child[0]=IsAbilityAvailable-PistolStandardShot, Child[1]=SelectKillShotEnemyTarget_Pistol, Child[2]=SelectAbility-PistolStandardShot)
+Behaviors=(BehaviorName=SelectKillShotEnemyTarget_Pistol, NodeType=Sequence, Child[0]=SetTargetStack-PistolStandardShot, Child[1]=EvaluateKillShotEnemyTargets_ABA, Child[2]=HasValidTarget-PistolStandardShot)

; +++ Prio: Shoot when sure shot (CTH > 80)
+Behaviors=(BehaviorName=ShootWhenSureShot_Pistol, NodeType=Sequence, Child[0]=IsAbilityAvailable-PistolStandardShot, Child[1]=SelectSureShotEnemyTarget_Pistol, Child[2]=SelectAbility-PistolStandardShot)
+Behaviors=(BehaviorName=SelectSureShotEnemyTarget_Pistol, NodeType=Sequence, Child[0]=SetTargetStack-PistolStandardShot, Child[1]=EvaluateSureShotEnemyTargets_ABA, Child[2]=HasValidTarget-PistolStandardShot)

+Behaviors=(BehaviorName=ShootWhenFlankingPistolMaybe, NodeType=RandFilter, Child[0]=ShootWhenFlanking_Pistol, Param[0]=30)
+Behaviors=(BehaviorName=ShootWhenKillShotPistolMaybe, NodeType=RandFilter, Child[0]=ShootWhenKillShot_Pistol, Param[0]=10)
+Behaviors=(BehaviorName=ShootWhenSureShotPistolMaybe, NodeType=RandFilter, Child[0]=ShootWhenSureShot_Pistol, Param[0]=30)
+Behaviors=(BehaviorName=TakePriorityShotsPistolMaybe, NodeType=Selector, Child[0]=ShootWhenFlankingPistolMaybe, Child[1]=ShootWhenKillShotPistolMaybe, Child[2]=ShootWhenSureShotPistolMaybe)

; Instead of focusing down Sharpshooters with Tracking Shot, the Hunter will go after those soldiers that currently have the best shots.
-Behaviors=(BehaviorName=ScoreTrackingShotMarkTarget, NodeType=Sequence, Child[0]=TargetIsEnemy, Child[1]=TargetIsNotCivilian, Child[2]=TargetNotTeamResistance, Child[3]=TargetIsNotLost, Child[4]=TargetIsNotEnemyVIP, Child[5]=AvoidBoundAndPanickedTargets, Child[6]=TargetScoreByScaledDistance-1, Child[7]=AddToTargetScore_200, Child[8]=TargetPrioritizeSnipers)
+Behaviors=(BehaviorName=ScoreTrackingShotMarkTarget, NodeType=Sequence, Child[0]=TargetIsEnemy, Child[1]=TargetIsNotCivilian, Child[2]=TargetNotTeamResistance, Child[3]=TargetIsNotLost, Child[4]=TargetIsNotEnemyVIP, Child[5]=AvoidBoundAndPanickedTargets, Child[6]=TargetScoreByScaledDistance-1, Child[7]=AddToTargetScore_200, Child[8]=TargetPrioritizeGoodShots)
+Behaviors=(BehaviorName=TargetPrioritizeGoodShots, NodeType=Selector, Child[0]=IfGoodShotAddToScore, Child[1]=AddToTargetScore_1)
+Behaviors=(BehaviorName=IfGoodShotAddToScore, NodeType=Sequence, Child[0]=TargetHasHighestShotHitChance, Child[1]=NotLastTargetOfTrackingShot, Child[2]=AddToTargetScore_20)






; +++ PRIME REACTIONS +++
+Behaviors=(BehaviorName=WarlockReaction, NodeType=Selector, Child[0]=TryEndSpectralArmy, Child[1]=TryChosenExtract, Child[2]=SelectPreselectedAbility, Child[3]=TryChosenSummon, Child[4]=WarlockMoveIfNecessary, Child[5]=ChosenWarlockEngagedFirstActionSelector, Child[6]=TryShootOrReloadOrOverwatch, Child[7]=MoveChosenStayBack)
+Behaviors=(BehaviorName=AssassinReaction, NodeType=Selector, Child[0]=TryChosenExtract, Child[1]=SelectPreselectedAbility, Child[2]=AssassinEngagedLastActionSelector, Child[3]=TryChosenSummon, Child[4]=TryShootOrReloadOrOverwatch, Child[5]=MoveChosenStayBack)
+Behaviors=(BehaviorName=HunterReaction, NodeType=Selector, Child[0]=TryChosenExtract, Child[1]=SelectPreselectedAbility, Child[2]=TryChosenSummon, Child[3]=TryGrapple, Child[4]=ChosenHunterEngagedFirstActionSelector, Child[5]=TryShootOrReloadOrOverwatch, Child[6]=MoveChosenStayBack)







; If Bloodlust ist available from the associated Trait, then use it instead of going for an Extract/Kidnap
; -- DISABLED
;-Behaviors=(BehaviorName=TryChosenExtract, NodeType=Selector, Child[0]=TryChosenExtractAbility, Child[1]=ChosenMoveTowardDazed)
;+Behaviors=(BehaviorName=TryChosenExtract, NodeType=Selector, Child[0]=TryChosenBloodlust, Child[1]=TryChosenExtractAbility, Child[2]=ChosenMoveTowardDazed)

; Chosen Bloodlust is the active Perk that comes with the Bloodlust trait.
; Target restriction is handled from template, so AI can be super basic.
;+Behaviors=(BehaviorName=TryChosenBloodlust, NodeType=Sequence, Child[0]=IsAbilityAvailable-ChosenBloodlust, Child[1]=SelectTargetForChosenBloodlust, Child[2]=SelectAbility-ChosenBloodlust)
;+Behaviors=(BehaviorName=SelectTargetForChosenBloodlust, NodeType=Sequence, Child[0]=SetTargetStack-ChosenBloodlust, Child[1]=GenericSelectBestTarget, Child[2]=HasValidTarget-ChosenBloodlust)
;+Behaviors=(BehaviorName=IsAbilityAvailable-ChosenBloodlust, NodeType=Condition)
;+Behaviors=(BehaviorName=HasValidTarget-ChosenBloodlust, NodeType=Condition)
;+Behaviors=(BehaviorName=SelectAbility-ChosenBloodlust, NodeType=Action)
;+Behaviors=(BehaviorName=SetTargetStack-ChosenBloodlust, NodeType=Action)

;TryTeleportDefensive